
use ::java::data::advancement::predicate::EntityPredicate
use ::java::data::damage_type::DamageType
use ::java::util::effect::MobEffectInstance
use ::java::data::util::WeightedSoundEvent
use ::java::util::attribute::AttributeName
use ::java::util::attribute::AttributeOperation

dispatch minecraft:resource[wotr:ability] to struct AbstractAbility {
	type: #[id] AbilityTypes,
	ability_name: #[id="resource_location"] string,
	icon: #[id="resource_location"] string,
	cooldown: int,
	effects: [Effect],
}

enum(string) AbilityTypes {
	StandardAbility = "wotr:standard_ability"
}

//EFFECTS
enum(string) RelativeFrame {
	absolute = 				"absolute",
	source_from_target = 	"source_from_target",
	target_from_source = 	"target_from_source",
	source_facing = 		"source_facing",
	source_y_facing = 		"source_y_facing",
	target_y_facing = 		"target_y_facing"
}

enum(string) EffectTypes {
	HealEffect = 				"wotr:heal_effect",
	MovementEffect = 			"wotr:movement_effect",
	TargetEffect = 				"wotr:target_effect",
	DamageEffect = 				"wotr:damage_effect",
	TeleportEffect = 			"wotr:teleport_effect",
	StatusEffect = 				"wotr:status_effect",
	BreakEffect = 				"wotr:break_effect",
	SummonEffect = 				"wotr:summon_effect",
	ProjectileEffect = 			"wotr:projectile_effect",
	SimpleProjectileEffect = 	"wotr:simple_projectile_effect",
	SoundEffect = 				"wotr:sound_effect"
}

struct TeleportInfo {
	teleport_target: TeleportTarget,
	position: [double, double, double],
	relative?: boolean
}


enum(string) TeleportTarget {
	user = "user",
	target = "target"
}

struct Effect {
	type: #[id] EffectTypes,
	targeting: Targeting,
	...wotr:effect_type[[type]],
	effects: [Effect],
}

dispatch wotr:effect_type[wotr:sound_effect] to struct SoundEffect {
	sound: WeightedSoundEvent
}

dispatch wotr:effect_type[wotr:simple_projectile_effect] to struct SimpleProjectileEffect {
	config: struct SimpleProjectileConfig {
		render: struct SimpleProjectileConfigRenderConfig {
			model: #[id="resource_location"] string,
			texture: #[id="resource_location"] string,
			animations: #[id="resource_location"] string
		},
		projectiles?: int,
		velocity: float,
		gravity_affected?: boolean,
		gravity?: float,
		ground_persist_ticks?: int
	}
}

dispatch wotr:effect_type[wotr:projectile_effect] to struct ProjectileEffect {
	entity_type: #[id="resource_location"] string,
	amount: int
}

dispatch wotr:effect_type[wotr:summon_effect] to struct SummonEffect {
	projectile_type: #[id="resource_location"] string,
	velocity: [double, double, double]
}

dispatch wotr:effect_type[wotr:damage_effect] to struct DamageEffect {
	amount: float,
	damage_type: DamageType
}

dispatch wotr:effect_type[wotr:status_effect] to struct StatusEffect {
	status_effect: MobEffectInstance
}

dispatch wotr:effect_type[wotr:teleport_effect] to struct TeleportEffect {
	tele_info: TeleportInfo
}

dispatch wotr:effect_type[wotr:heal_effect] to struct HealEffect {
	amount: float,
}


dispatch wotr:effect_type[wotr:movement_effect] to struct MovementEffect {
	velocity: [float,float,float],
	relativeFrame?: RelativeFrame
}

//TARGETING MECHANICS
enum(string) TargetingTypes {
	Self = "wotr:self_targeting",
	Area = "wotr:area_targeting",
	Raycast = "wotr:raycast_targeting"
}

struct Targeting {
	type: #[id] TargetingTypes,
	...wotr:targeting_type[[type]]
}
dispatch wotr:targeting_type[wotr:self_targeting] to struct Self {
}


dispatch wotr:targeting_type[wotr:area_targeting] to struct Area {
	target?: TargetPredicate,
	range: float,
	include_self?: boolean
}

dispatch wotr:targeting_type[wotr:raycast_targeting] to struct Raycast {
	target?: TargetPredicate,
	range: float,
}

struct TargetPredicate {
	entity?: EntityPredicate,
	attitude?: enum(string) EntityAttitude {
		Any="any",
		Friend="friend",
		NotFriend="not_friend",
		Neutral="neutral",
		NotFoe="not_foe",
		Foe="foe"
	},
	exclude_caster?: boolean
}


//Modifiers
dispatch minecraft:resource[wotr:modifier] to struct Modifier {
	tier: int,
	modifiers: [ModifierEffect]
}

struct ModifierEffect {
	type: #[id] ModifierEffectTypes,
	...wotr:modifier_effect[[type]]
}

//Our Attributes go here
enum(string) WotrAttributeNames {
	ability_aoe = "wotr:ability_aoe",
	ability_raw_damage = "ability_raw_damage",
	ability_cooldown = "ability_cooldown",
	ability_heal_power = "ability_heal_power",
	mana_cost = "mana_cost",
	projectile_spread = "projectile_spread",
	projectile_count = "projectile_count",
	projectile_speed = "projectile_speed",
	max_mana = "max_mana",
	mana_regen_rate = "mana_regen_rate",
	mana_degen_rate = "mana_degen_rate",
}

enum(string) ModifierEffectTypes {
	AttributeModifierEffect = "wotr:attribute"
}

dispatch wotr:modifier_effect[wotr:attribute] to struct AttributeModifierEffect {
	id: #[id="resource_location"] string,
	attribute: (AttributeName | WotrAttributeNames |),
	min_roll: double,
	max_rol: double,
	operation: AttributeOperation
}

//Ability Upgrades
dispatch minecraft:resource[wotr:ability_upgrade] to struct AbilityUpgrade {
	id: #[id="resource_location"] string,
	icon: #[id="resource_location"] string,
	maxCount: int,
	effects?: [ModifierEffect]
}

//Rune Gems
enum(string) RuneGemTier {
	Raw = "raw",
	Shaped = "shaped",
	Cut = "cut",
	Polished = "polished",
	Framed = "framed",
	Unique = "unique"
}

enum(string) RuneGemShape {
	Circle = "circle",
    Square = "square",
    Triangle = "triangle",
    Diamond = "diamond",
    Heart = "heart",
    Pentagon = "pentagon"
}

struct ModifierGroup {
	supported_items: (
		#[id(registry="item", tags="allowed")] string |
		[#[id="item"] string] |
	),
	modifiers: (
		#[id(registry="wotr:modifier", tags="allowed")] string |
		[#[id="wotr:modifier"] string] |
	)
}

dispatch minecraft:resource[wotr:runegem_data] to struct RuneGemData {
	shape: RuneGemShape,
	modifier_options: [ModifierGroup],
	tier: RuneGemTier
}
